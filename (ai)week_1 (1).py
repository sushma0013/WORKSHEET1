# -*- coding: utf-8 -*-
"""(AI)week-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11SPhXc_aNHiUtbJ2wrZAL5J25mcYV5OU
"""

# queno:1
# empty2*2array
import numpy as np
empty_array = np.empty((2,2))
print (empty_array)

# quesno:2
# one array with size 4X2.
import numpy as np
ones_array = np.ones((4,2))
print (ones_array)

# quesno3:
import numpy as np
filled_array = np.full((3,3),9)
print(filled_array)

# quesno:4
import numpy as np
original_array = np.array([[5,8,1],[1,2,9]])
zeros_array = np.zeros_like(original_array)
print(zeros_array)

# quesno5:
import numpy as np
original_array = np.array([[1,2,3],[4,5,6]])
ones_array = np.ones_like(original_array)
print (ones_array)

# queno6:
import numpy as np
new_list = [1,2,3,4]
array = np.array(new_list)
print(array)

# quesno2.1
import numpy as np
array = np.arange(10, 50)
print("Array with values from 10 to 49:")
print(array)

# quesno2.2
import numpy as np
array = np.arange(9)
matrix = array.reshape(3,3)
print(matrix)

# quesno2.3
import numpy as np
identity_matrix = np.eye(3)
print(identity_matrix)

# quesno2.4
import numpy as np
random_array = np.random.random(30)
mean_value = random_array.mean()
print(mean_value)

# quesno2.5
import numpy as np
random_array = np.random.random((10,10))
min_value = random_array.min()
max_value = random_array.max()
print("10*10 Random Array:" )
print(random_array)
print("minimum value:")
print(min_value)
print("maximum value:")
print(max_value)

# quesno2.6
import numpy as np
zero_array = np.zeros(10)
zero_array[4]=1
print(zero_array)

# quesno2.7
import numpy as np
arr = np.array([1,2,0,0,4,0])
reversed_arr = arr[::-1]
print(reversed_arr)

# quesno2.8
# Create a 2d array with 1 on border and 0 inside.
import numpy as np
n = 3
arr = np.ones((n, n), dtype=int)
arr[1:-1, 1:-1] = 0
print(arr)

# Part 2
# Ques 9
import numpy as np
check = np.random.randint(0,1,(8,8))
check[1::2, ::2] = 1
check[::2, 1::2] = 1
print(check)

# quesno3.1
import numpy as np
x = np.array([[1,2],
              [3,5]])
y = np.array([[5,6]
            , [7,8]])
result1 = x+y
result2 = np.add(x,y)
print(result1)
print(result2)

v = np.array([9,10])
w = np.array([11,12])
result1 = np.add(v,w)
print(result1)

# quesno3.2
import numpy as np
x = np.array([[1,2],
              [3,5]])
y = np.array([[5,6]
            , [7,8]])
result = np.subtract(x,y)
print(result)

v = np.array([9,10])
w = np.array([11,12])
result = np.subtract(v,w)
print(result)

# queno3.3
import numpy as np
x = np.array([[1,2],
             [3,5]])
y = np.array([[5,6],
             [7,8]])
result = np.multiply(x,y)
print(result)

v = np.array([[9,10],
              [11,12]])
w = np.array([[13,14],
             [15,16]])
result = np.multiply(v,w)
print(result)

# quesno3.4
import numpy as np
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
x_result = x * 0
y_result = y * 2
print("x = \n", x_result)
print("y =Â \n", y_result)

# quesno3.5
import numpy as np
v = np.array([9,10])
w = np.array([11,12])
x = np.array([[1,2],
              [3,5]])
y = np.array([[5,6]
            , [7,8]])

result1 = np.dot(v,w)
result2 = np.dot(x,v)
result3 =np.dot(x,y)

print(result1)
print(result2)
print(result3)

#que3.6
#Concatenate x(and)y along row and Concatenate v(and)w along column.
import numpy as np
x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
v = np.array([9, 10])
w = np.array([11, 12])
concat_x_y = np.vstack((x, y))
concat_v_w = np.column_stack((v, w))
print("Concatenated x and y along rows:\n", concat_x_y)
print("Concatenated v and w along columns:\n", concat_v_w)

#quesno3.7
# Concatenate x(and)v; if you get an error, observe and explain why did you get the error?
import numpy as np
x = np.array([[1, 2], [3, 5]])
v = np.array([9, 10])
try:
    result = np.concatenate((x, v), axis=0)
except Exception as e:
    print(f"Error: {e}")

# quesno4.1
import numpy as np

# Define matrices A and B
A = np.array([[3, 4], [7, 8]])
B = np.array([[5, 3], [2, 1]])

# 1. Prove A * A^-1 = I
A_inv = np.linalg.inv(A)
result_A_A_inv = np.dot(A, A_inv)
I = np.eye(2)
print("A * A^-1 =\n", result_A_A_inv)
print("Identity Matrix I =\n", I)

# 2. Prove AB != BA
AB = np.dot(A, B)
BA = np.dot(B, A)
print("AB =\n", AB)
print("BA =\n", BA)
print("AB != BA")

# 3. Prove (AB)^T = B^T * A^T
AB_T = np.transpose(AB)
B_T_A_T = np.dot(np.transpose(B), np.transpose(A))
print("Transpose of AB = (AB)^T:\n", AB_T)
print("B^T * A^T:\n", B_T_A_T)
print("AB^T = B^TA^T")

# quesno4.2
import numpy as np

A = np.array([[2, -3, 1],
              [1, -1, 2],
              [3, 1, -1]])
B = np.array([-1, -3, 9])
A_inv = np.linalg.inv(A)
X = np.dot(A_inv, B)
print("Solution for [x, y, z]:", X)